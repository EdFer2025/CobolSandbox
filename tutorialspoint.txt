https://www.tutorialspoint.com/cobol/index.htm

COBOL: Common Business-Oriented Language

Use Business Oriented developed in 1959
COBOL was designed for business-oriented applications related to financial domain, defense domain, etc. 
It can handle huge volumes of data because of its advanced file handling capabilities.
Generally COBOL is not used for front-end web development, 
however it can be integrated with web services and back-end systems to support web applications.

DIVISIONs

Identification Division (mandatoy)
PROGRAM-ID is the only mandatory paragraph. PROGRAM-ID specifies the program name that can consist 1 to 30 characters.

Environment Division
Environment division is used to specify input and output files to the program. It consists of two sections:
    Configuration section provides information about the system on which the program is written and executed. It consists of two paragraphs −
        Source computer − System used to compile the program.
        Object computer − System used to execute the program.
    Input-Output section provides information about the files to be used in the program. It consists of two paragraphs −
        File control − Provides information of external data sets used in the program.
        I-O control − Provides information of files used in the program.

Data Division
Data division is used to define the variables used in the program. It consists of four sections −
    File section is used to define the record structure of the file.
    Working-Storage section is used to declare temporary variables and file structures which are used in the program.
    Local-Storage section is similar to Working-Storage section. The only difference is that the variables will be allocated and initialized every time a program starts execution.
    Linkage section is used to describe the data names that are received from an external program.

Procedure Division
    Procedure division is used to include the logic of the program. 
    It consists of executable statements using variables defined in the data division. 
    In this division, paragraph and section names are user-defined.

COBOL control structures
conditional statements (IF, EVALUATE)
loops (PERFORM).

Error handling in COBOL
the FILE STATUS clause for file operations
the INVALID KEY and AT END clauses for other operations.

Syntax:
The COBOL Character Set includes 78 characters which are shown below −

Character & Description
-------------------------
A-Z Alphabets(Upper Case)
a-z Alphabets (Lower Case)
0-9 Numeric
  Space
+ Plus Sign
- Minus Sign or Hyphen
* Asterisk
/ Forward Slash
$ Currency Sign
, Comma
; Semicolon
. Decimal Point or Period
" Quotation Marks
( Left Parenthesis
) Right Parenthesis
> Greater than
< Less than
: Colon
' Apostrophe
= Equal Sign

Coding Sheet
The source program of COBOL must be written in a format acceptable to the compilers. COBOL programs are written on COBOL coding sheets. There are 80 character positions on each line of a coding sheet.
Character positions are grouped into the following five fields −

Positions	Field	Description
1-6	Column Numbers	Reserved for line numbers.
7	Indicator	It can have Asterisk (*) indicating comments, Hyphen (-) indicating continuation and Slash ( / ) indicating form feed.
8-11	Area A	All COBOL divisions, sections, paragraphs and some special entries must begin in Area A.
12-72	Area B	All COBOL statements must begin in area B.
73-80	Identification Area	It can be used as needed by the programmer.

Variables
are defined in the DATA DIVISION, specifically in the WORKING-STORAGE SECTION

Data Types:
    Numeric:
        PIC 9 for numeric
        PIC S9 for signed numbers
    characters:
        PIC A
    Alphanumeric:
        PIC X for alphanumeric

Definition of a Variable:
Level_Number    Data_Name       Picture_Clause  Value_Clause    End 
01              TOTAL-STUDENTS  PIC9(5)         VALUE '125'     .

Level Number &  Description
01              Record description entry
02 to 49        Group and Elementary items
66              Rename Clause items
77              Items which cannot be sub-divided
88              Condition name entry

Example:
DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-NAME    PIC X(25).                               ---> ELEMENTARY ITEM 
01 WS-CLASS   PIC 9(2)  VALUE  '10'.                   ---> ELEMENTARY ITEM

01 WS-ADDRESS.                                         ---> GROUP ITEM   
   05 WS-HOUSE-NUMBER    PIC 9(3).                     ---> ELEMENTARY ITEM
   05 WS-STREET          PIC X(15).                    ---> ELEMENTARY ITEM
   05 WS-CITY            PIC X(15).                    ---> ELEMENTARY ITEM
   05 WS-COUNTRY         PIC X(15)  VALUE 'INDIA'.     ---> ELEMENTARY ITEM

Naming:
It is a suser defined word that cannot be a reserved word.
Naming conventions prefixes: 
    WS-                 for variables in the Working-Storage Section
    FD-, F-             for File Description section variables
    LK-                 sometimes used for Linkage Section variables
    TEMP-, CNT-, SW-    short for temporary, counter, or switch variables

PIC
Symbol      Description
9           Numeric
A           Alphabetic
X           Alphanumeric
V           Implicit Decimal
S           Sign
P           Assumed Decimal
Example
DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-NUM1 PIC S9(3)V9(2).
01 WS-NUM2 PIC PPP999.
01 WS-NUM3 PIC S9(3)V9(2) VALUE -123.45.
01 WS-NAME PIC A(6) VALUE 'ABCDEF'.
01 WS-ID PIC X(5) VALUE 'A121$'.


Arithmetic operations: 
ADD, SUBTRACT, MULTIPLY, DIVIDE, and COMPUTE verbs.


STRINGS

Inspect
verb is used to count or replace the characters in a string. 
String operations can be performed on alphanumeric, numeric, or alphabetic values. 
Inspect operations are performed from left to right. The options used for the string operations are as follows

String
String verb is used to concatenate the strings. 
Using STRING statement, two or more strings of characters can be combined to form a longer string. 
Delimited By clause is compulsory.
      
Unstring
Unstring verb is used to split one string into multiple sub-strings. Delimited By clause is compulsory.


TABLES



FILE handling


Fields can have the following attributes 
    - Primary keys are those fields that are unique to each record and are used to identify a particular record. For example, in students marks file, each student will be having a unique student id which forms the primary key.
    - Secondary keys are unique or non-unique fields that are used to search for related data. For example, in students marks file, full name of student can be used as secondary key when student id is not known.
    - Descriptors fields are used to describe an entity. For example, in students marks file, marks and percentage fields that add meaning to the record are known descriptors.


Record is a collection of fields that is used to describe an entity

Physical record is the information that exists on the external device. It is also known as a block.

Logical record is the information used by the program. In COBOL programs, only one record can be handled at any point of time and it is called as logical record.

File is a collection of related records. For example, the students marks file consists of records of all the students.



File Organization

Sequential file organization
records that are stored and accessed in sequential order

INPUT-OUTPUT SECTION.
FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name-jcl
   ORGANIZATION IS SEQUENTIAL


Indexed sequential file organization
An indexed sequential file consists of records that can be accessed sequentially. Direct access is also possible. It consists of two parts −

Data File: contains records in sequential scheme.
Index File: contains the primary key and its address in the data file

INPUT-OUTPUT SECTION.
FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name-jcl
   ORGANIZATION IS INDEXED
   RECORD KEY IS primary-key
   ALTERNATE RECORD KEY IS rec-key


Relative File Organization
A relative file consists of records ordered by their relative address. Following are the key attributes of relative file organization −
Records can be read in sequential order just like in sequential and indexed file organization.
Records can be accessed using relative key. Relative key represents the records location relative to the address of the start of the file.
Records can be inserted using relative key. Relative address is calculated using relative key.
Relative file provides the fastest access to the records.
The main disadvantage of this file system is that if some intermediate records are missing, they will also occupy space.

INPUT-OUTPUT SECTION.
FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name-jcl
   ORGANIZATION IS RELATIVE
   RELATIVE KEY IS rec-key



File Access Mode
    - Sequential Access
    - Random Access
    - Dynamic Access


File Organization   | Sequential Access | Random Access     | Dynamic Access
SEQUENTIAL          | ✅ Allowed        | ❌ Not allowed    | ❌ Not allowed
INDEXED             | ✅ Allowed        | ✅ Allowed        | ✅ Allowed
RELATIVE            | ✅ Allowed        | ✅ Allowed        | ✅ Allowed


Sequential Access
When the access mode is sequential, the method of record retrieval changes as per the selected file organization.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS SEQUENTIAL
   ACCESS MODE IS SEQUENTIAL

Random Access
When the access mode is RANDOM, the method of record retrieval changes as per the selected file organization.
    - For indexed files, records are accessed according to the value placed in a key field which can be primary or alternate key. There can be one or more alternate indexes.
    - For relative files , records are retrieved through relative record keys.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS INDEXED
   ACCESS MODE IS RANDOM
   RECORD KEY IS rec-key1
   ALTERNATE RECORD KEY IS rec-key2


Dynamic Access
Dynamic access supports both sequential and random access in the same program. 
    - With dynamic access, one file definition is used to perform both sequential and random processing like accessing some records in sequential order and other records by their keys.
    - With relative and indexed files, the dynamic access mode allows you to switch back and forth between sequential access mode and random access mode while reading a file by using the NEXT phrase on the READ statement. 


ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS RELATIVE
   ACCESS MODE IS DYNAMIC
   RELATIVE KEY IS rec-key1


MOST OF THE CASES COMBINATION:
INDEXED File Organization       WITH        Access Mode: DYNAMIC

INDEXED organization supports:
    - Primary keys (like account numbers)
    - Alternate keys (optional, like emails)
    - Efficient random access (you can directly find a record by key)
    - Sequential access for processing all records (like generating reports)
DYNAMIC access allows both:
    - Random access 
    - Sequential access

SELECT CUSTOMER-FILE
    ASSIGN TO "filename.txt"
    ORGANIZATION IS INDEXED
    ACCESS MODE IS DYNAMIC
    RECORD KEY IS CUSTOMER-ID
    FILE STATUS IS WS-FILE-STATUS.



File Handling Verbs
    - Open
    - Read
    - Write
    - Rewrite
    - Delete
    - Start
    - Close

OPEN
OPEN "mode" file-name.

Mode:

Input
Input mode is used for existing files. 
In this mode, we can only read the file, no other operations are allowed on the file.
	
Output
Output mode is used to insert records in files. 
If a sequential file is used and the file is holding some records, 
then the existing records will be deleted first and then new records will be inserted in the file. 
It will not happen so in case of an indexed file or a relative file.
	
Extend
Extend mode is used to append records in a sequential file. 
In this mode, records are inserted at the end. 
If file access mode is Random or Dynamic, then extend mode cannot be used.
	
I-O
Input-Output mode.


READ
he function of read is to fetch records from a file. 
At each read verb, only one record can be read into the file structure. 
To perform a read operation, open the file in INPUT or I-O mode. 
At each read statement, the file pointer is incremented and hence the successive records are read.

READ file-name NEXT RECORD INTO ws-file-structure
   AT END DISPLAY 'End of File'
   NOT AT END DISPLAY 'Record Details:' ws-file-structure
END-READ.

- NEXT RECORD is optional and is specified when an indexed sequential file is being read sequentially.
- INTO clause is optional. ws-file-structure is defined in the WorkingStorage Section to get the values from the READ statement.
- AT END condition becomes True when the end of file is reached.


IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

ENVIRONMENT DIVISION.
   INPUT-OUTPUT SECTION.
      FILE-CONTROL.
      SELECT STUDENT ASSIGN TO 'input.txt'
      ORGANIZATION IS LINE SEQUENTIAL.            

DATA DIVISION.
   FILE SECTION.
   FD STUDENT.
   01 STUDENT-FILE.
      05 STUDENT-ID PIC 9(5).
      05 NAME PIC A(25).

   WORKING-STORAGE SECTION.
   01 WS-STUDENT.
      05 WS-STUDENT-ID PIC 9(5).
      05 WS-NAME PIC A(25).
   01 WS-EOF PIC A(1). 

PROCEDURE DIVISION.
   OPEN INPUT STUDENT.
      PERFORM UNTIL WS-EOF='Y'
         READ STUDENT INTO WS-STUDENT
            AT END MOVE 'Y' TO WS-EOF
            NOT AT END DISPLAY WS-STUDENT
         END-READ
      END-PERFORM.
   CLOSE STUDENT.
STOP RUN.


Write Verb
Write verb is used to insert records in a file. 
Once the record is written, it is no longer available in the record buffer. 
Before inserting records into the file, move the values into the record buffer and then perform write verb.


Rewrite Verb
Rewrite verb is used to update the records. File should be opened in I-O mode for rewrite operations. 
It can be used only after a successful Read operation. Rewrite verb overwrites the last record read.

Delete Verb
Delete verb can be performed only on indexed and relative files. 
The file must be opened in I-O mode. In sequential file organization, records cannot be deleted. 
The record last read by the Read statement is deleted in case of sequential access mode. 
In random access mode, specify the record key and then perform the Delete operation.

Close Verb
Close verb is used to close a file. 
After performing Close operation, the variables in the file structure will not be available for processing. 
The link between program and file is lost.




